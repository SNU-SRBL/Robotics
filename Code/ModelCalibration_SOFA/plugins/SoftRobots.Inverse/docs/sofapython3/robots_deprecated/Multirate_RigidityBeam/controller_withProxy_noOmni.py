import Sofa
from parameters import *

"""
EVERYTHING IN STANDARD UNITS AND MULTIPLICATORS = METERS, KG, SECONDS...

DO NOT TO USE millimeters
"""

def createScene(rootNode):
    
    rootNode.findData('dt').value=lrDT_value
    rootNode.findData('gravity').value='0 0 -9.81'
    rootNode.addObject('VisualStyle', displayFlags='showCollision showVisualModels showBehaviorModels showForceFields showInteractionForceFields')
    rootNode.addObject('AsynchroThreadedAnimationLoop', name='ATAL', listening=1, hrDT=hrDT_value, lrDT=lrDT_value, lowRateNode='lowRate', highRateNode='highRate', useThreadOmni=False, printLog=printATAL)
    
    
    # Low frequency loop
    lowRate = rootNode.addChild('lowRate')
    lowRate.addObject('AsynchroLowRateAnimationLoop', name='ALRAL', proxyHighRateObjectNode='GoalProxy', lowRateObjectNode='BeamNode', printLog=printALRAL)
    lowRate.addObject('AsynchroLowRateConstraintSolver', name='ALRCS', tolerance=1e-6, maxIterations=1, printLog=printALRCS)
    lowRate.addObject('DefaultPipeline', depth=6)
    lowRate.addObject('BruteForceBroadPhase')
    lowRate.addObject('BVHNarrowPhase')
    lowRate.addObject('LocalMinDistance', alarmDistance='0.0', contactDistance='0.005',  angleCone='0.01', coneFactor=0.05)
    lowRate.addObject('DefaultContactManager', response='FrictionContactConstraint')
    
    
    ##### The following lines have been automatically generated by the createProxy() function! Ensure yourself of their exactness #####
    
    # lowRate/GoalProxy
    GoalProxy = lowRate.addChild('GoalProxy')
    GoalProxy.findData('tags').value = LRTag
    GoalProxy.addObject('EulerImplicitSolver', tags=LRTag, firstOrder=0)
    GoalProxy.addObject('CGLinearSolver', tags=LRTag, iterations=100, tolerance=1e-05, threshold=1e-05)
    GoalProxy.addObject('MechanicalObject', tags='proxy lowRate', name="GoalProxyMO", template="Rigid3", position="0.01 0 0.0035 0 0 0 1")
    GoalProxy.addObject('UncoupledConstraintCorrection', tags=LRTag)
    GoalProxy.addObject('AsynchroStateCopyController', tags=LRTag, name='Client', interlocutorName='Server', template="Rigid3", isServer=0, printLog=0)
    
    # LF - Not used for the moment
    # GoalProxyCollision = GoalProxy.addChild('GoalProxyCollision')
    # GoalProxyCollision.addObject('MechanicalObject', tags=LRTag, template='Vec3', name="GoalProxyCollisionMO")
    # GoalProxyCollision.addObject('SphereCollisionModel', radius="0.002", group="3")
    # GoalProxyCollision.addObject('RigidMapping', input='@../GoalProxyMO', output='@GoalProxyCollisionMO')
    
    ##### End of the generation #####
    
    
    
    # lowRate/BeamNode
    BeamNode = lowRate.addChild('BeamNode')
    BeamNode.findData('tags').value='lowRate highRate'
    
    
    # Shore A : 10 and 40 available at lab according to Mario
    # poisson's ratio : ~0.49
    
    # lowRate/BeamNode/Beam
    Beam = BeamNode.addChild('Beam')
    Beam.findData('tags').value=LRTag
    Beam.addObject('EulerImplicitSolver', tags=LRTag)
    Beam.addObject('ShewchukPCGLinearSolver', tags=LRTag, iterations="1", tolerance="1e-5", preconditioners="SparseLDLSolver",use_precond=True, update_step="1" )
    
    # This mesh's dimensions are in mm : 5 x 20 x 100  ie in m : 0.005 x 0.020 x 0.100 equals a VOLUME of 0.00001 m*m*m
    Beam.addObject('RegularGridTopology', tags=LRTag, nx=21, ny="5", nz="5", xmin="-0.050", xmax="0.050", ymin="-0.010", ymax="0.010", zmin="-0.0025", zmax="0.0025")
    Beam.addObject('MechanicalObject', tags='lowRate obstacle', name='BeamMO', template='Vec3')
    
    # Volumic mass of silicon = ~1070kg/m*m*m for a shore 10A sample
    Beam.addObject('UniformMass', tags=LRTag, totalMass=M)
    
    Beam.addObject('HexahedronFEMForceField', tags=LRTag, template="Vec3", method='large', poissonRatio=v, youngModulus=E)
    Beam.addObject('SparseLDLSolver', tags=LRTag)
    Beam.addObject('LinearSolverConstraintCorrection', tags=LRTag, solverName='SparseLDLSolver')
    
    # Values for Dragon Skin 10A found on papers on the internet
    Beam.addObject('PlaneForceField', tags=LRTag, normal="0 0 1", d="0.0025", localRange="439 440", bilateral="1")
    Beam.addObject('PlaneForceField', tags=LRTag, normal="0 0 1", d="0.0025", localRange="460 461", bilateral="1")
    Beam.addObject('PlaneForceField', tags=LRTag, normal="0 0 1", d="0.0025", localRange="481 482", bilateral="1")
    Beam.addObject('PlaneForceField', tags=LRTag, normal="0 0 1", d="0.0025", localRange="502 503", bilateral="1")
    Beam.addObject('PlaneForceField', tags=LRTag, normal="0 0 1", d="0.0025", localRange="523 524", bilateral="1")
    
    Beam.addObject('BoxROI', tags=LRTag, box="-0.050 -0.015 -0.005 -0.035 0.015 0.005", drawBoxes=True)
    Beam.addObject('FixedConstraint', tags=LRTag, indices="@BoxROI.indices")
    
    
    ##### The following lines have been automatically generated by the createProxy() function! Ensure yourself of their exactness #####
    
    # lowRate/Beam/BeamProxy
    BeamProxy = BeamNode.addChild('BeamProxy')
    BeamProxy.findData('tags').value=HRTag
    BeamProxy.addObject('EulerImplicitSolver', tags=HRTag)
    BeamProxy.addObject('ShewchukPCGLinearSolver', tags=HRTag, iterations="1", tolerance="1e-5", preconditioners="SparseLDLSolver",use_precond=True, update_step="1" )
    BeamProxy.addObject('RegularGridTopology', tags=HRTag, nx=21, ny="5", nz="5", xmin="-0.050", xmax="0.050", ymin="-0.010", ymax="0.010", zmin="-0.0025", zmax="0.0025")
    BeamProxy.addObject('MechanicalObject', position='@../Beam/BeamMO.position', velocity='@../Beam/BeamMO.velocity', constraint='@../Beam/BeamMO.constraint', tags='highRate obstacleProxy', name='BeamProxyMO', template='Vec3')
    BeamProxy.addObject('UniformMass', tags=HRTag, totalMass=M)
    BeamProxy.addObject('HexahedronFEMForceField', tags=HRTag, template="Vec3", method='large', poissonRatio=v, youngModulus=E)
    BeamProxy.addObject('SparseLDLSolver', tags=HRTag)
    BeamProxy.addObject('LinearSolverConstraintCorrection', tags=HRTag, solverName='SparseLDLSolver', printLog=1)
    BeamProxy.addObject('PlaneForceField', tags=HRTag, normal="0 0 1", d="0.0025", localRange="439 440", bilateral="1")
    BeamProxy.addObject('PlaneForceField', tags=HRTag, normal="0 0 1", d="0.0025", localRange="460 461", bilateral="1")
    BeamProxy.addObject('PlaneForceField', tags=HRTag, normal="0 0 1", d="0.0025", localRange="481 482", bilateral="1")
    BeamProxy.addObject('PlaneForceField', tags=HRTag, normal="0 0 1", d="0.0025", localRange="502 503", bilateral="1")
    BeamProxy.addObject('PlaneForceField', tags=HRTag, normal="0 0 1", d="0.0025", localRange="523 524", bilateral="1")
    BeamProxy.addObject('BoxROI', tags=HRTag, box="-0.050 -0.015 -0.005 -0.035 0.015 0.005", drawBoxes=True)
    BeamProxy.addObject('FixedConstraint', tags=HRTag, indices="@BoxROI.indices")
    
    ##### End of the generation #####
    
    
    
    
    # High frequency loop
    highRate = rootNode.addChild('highRate')
    highRate.addObject('AsynchroHighRateAnimationLoop', name='AHRAL', highRateObjectNode='Goal', interactiveControl='controlledPoints')
    highRate.addObject('AsynchroHighRateConstraintSolver', name='AHRCS', tolerance=1e-1, maxIterations=10, printLog=printAHRCS)
    
    # /highRate/Goal
    Goal = highRate.addChild('Goal')
    Goal.addObject('EulerImplicitSolver')
    Goal.addObject('CGLinearSolver', iterations=100, tolerance=1e-05, threshold=1e-05)
    # vertical position is 0.0025 initially so we ask for a displacement of 0.001m
    Goal.addObject('MechanicalObject', tags=HRTag, name="GoalMO", template="Rigid3", position="0.01 0 0.0035 0 0 0 1")
    Goal.addObject('UncoupledConstraintCorrection', tags=HRTag)
    Goal.addObject('AsynchroStateCopyController', name='Server', interlocutorName='Client', template="Rigid3", isServer=1, listening=1, printLog=0)
    
    # /highRate/Goal/GoalCollision
    GoalCollision = Goal.addChild('GoalCollision')
    GoalCollision.addObject('MechanicalObject', template='Vec3', name="GoalCollisionMO")
    GoalCollision.addObject('SphereCollisionModel', radius="0.002", group="3")
    GoalCollision.addObject('RigidMapping', input='@../GoalMO', output='@GoalCollisionMO')
    
    # /lowRate/BeamNode/Beam/controlledPoints
    controlledPoints = Beam.addChild('controlledPoints')
    controlledPoints.addObject('MechanicalObject', template="Vec3", position="0 0 0.0025   0.045 0.005 0   0.045 -0.0040 0   -0.045 0.005 0   -0.045 -0.005 0  0.05 0.0 0")
    controlledPoints.addObject('PositionEffectorGS', indices=0, effectorGoal="@/highRate/Goal/GoalCollision/GoalCollisionMO.position")
    controlledPoints.addObject('CableActuatorGS', index=5, pullPoint="0.30 0.0 0", maxPositiveDisp=0.25, maxNegativeDisp=0.25)
    controlledPoints.addObject('BoxROI', box="-0.01 -0.01 -0.01 0.01 0.01 0.01", drawBoxes=True)
    controlledPoints.addObject('ConstantForceField', points='@[-1].indices', force="0 0 -0.04", arrowSizeCoef=0.002, printLog=1)
    controlledPoints.addObject('BarycentricMapping', mapForces=1, mapMasses=0)
    
    highRate.addObject('InteractiveControl', name="Network Interactive Control Mot A", address="169.254.8.220", motorIndex="0", mode="3", listening=1, setpoint='@/lowRate/BeamNode/Beam/controlledPoints/QPInverseProblem.setpoint')  # Set listening to true  for HF computation
    
    
